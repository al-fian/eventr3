{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/eventity.ts","app/models/profile.ts","app/stores/eventityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/eventities/dashboard/EventityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/eventities/dashboard/EventityListItemAttendee.tsx","features/eventities/dashboard/EventityListItem.tsx","features/eventities/dashboard/EventityList.tsx","features/eventities/dashboard/EventityListItemPlaceholder.tsx","features/eventities/dashboard/EventityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/eventities/form/EventityForm.tsx","features/eventities/details/EventityDetailedChat.tsx","features/eventities/details/EventityDetailedHeader.tsx","features/eventities/details/EventityDetailedInfo.tsx","features/eventities/details/EventityDetailedSidebar.tsx","features/eventities/details/EventityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileEventities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Eventities","list","params","details","id","create","eventity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listEventities","Eventity","init","Object","assign","EventityFormValues","undefined","title","date","description","category","city","venue","Profile","displayName","image","EventityStore","eventityRegistry","Map","selectedEventity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadEventities","axiosParams","result","setEventity","setPagination","setLoadingInitial","console","log","loadEventity","getEventity","runInAction","userStore","isGoing","attendees","some","u","isHost","hostUsername","host","find","x","Date","state","createEventity","attendee","newEventity","updateEventity","updatedEventity","deleteEventity","updateAttendance","filter","e","cancelEventityToggle","isCancelled","clearSelectedEventity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","eventitiesByDate","reduce","eventities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userEventities","loadingEventities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","eventityStore","followingCount","loadFollowings","loadUserEventities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubconnection","eventityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","EventityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedEventities","group","sub","EventityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","eventityImageStyle","eventityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","EventityDashboard","EventityDetails","EventityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.39235f17.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Eventity, EventityFormValues } from '../models/eventity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile, UserEventity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\nconst sleep = (delay: number) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, delay);\n    });\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers!.Authorization = `Bearer ${token}`;\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n    const pagination = response.headers['pagination'];\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>;\n    }\n    return response;\n}, (error: AxiosError) => {\n    const {data, status, config} = error.response!;\n    switch (status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            }\n            break;\n        case 401:\n            toast.error('Unathorized');\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n});\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\n}\n\nconst Eventities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Eventity[]>>(\"/eventities\", {params})\n        .then(responseBody),\n    details: (id: string) => requests.get<Eventity>(`/eventities/${id}`),\n    create: (eventity: EventityFormValues) => requests.post<void>(\"/eventities\", eventity),\n    update: (eventity: EventityFormValues) => requests.put<void>(`/eventities/${eventity.id}`, eventity),\n    delete: (id: string) => requests.del<void>(`/eventities/${id}`),\n    attend: (id: string) => requests.post<void>(`/eventities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put('/profiles', profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) =>\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listEventities: (username: string, predicate: string) =>\n        requests.get<UserEventity[]>(`/profiles/${username}/eventities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Eventities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { Profile } from \"./profile\";\n\nexport interface Eventity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[];\n}\n\nexport class Eventity implements Eventity {\n    constructor(init?: EventityFormValues) {\n        Object.assign(this, init);\n    }\n}\n\nexport class EventityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    date: Date | null = null;\n    description: string = '';\n    category: string = '';\n    city: string = '';\n    venue: string = '';\n\n    constructor(eventity?: EventityFormValues) {\n        if (eventity) {\n            this.id = eventity.id;\n            this.title = eventity.title;\n            this.date = eventity.date;\n            this.description = eventity.description;\n            this.category = eventity.category;\n            this.city = eventity.city;\n            this.venue = eventity.venue;\n        }\n    }\n}","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserEventity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Eventity, EventityFormValues } from \"../models/eventity\";\nimport {format} from 'date-fns';\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\nexport default class EventityStore {\n    eventityRegistry = new Map<string, Eventity>();\n    selectedEventity: Eventity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.eventityRegistry.clear();\n                this.loadEventities();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n                break;\n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString());\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get eventitiesByDate() {\n        return Array.from(this.eventityRegistry.values()).sort((a, b) =>\n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedEventities() {\n        return Object.entries(\n            this.eventitiesByDate.reduce((eventities, eventity) => {\n                const date = format(eventity.date!, 'dd MMM yyyy');\n                eventities[date] = eventities[date] ? [...eventities[date], eventity] : [eventity];\n                return eventities;\n            }, {} as {[key: string]: Eventity[]})\n        );\n    }\n\n    loadEventities = async () => {\n        this.loadingInitial = true;\n        try {\n            const result = await agent.Eventities.list(this.axiosParams);\n            result.data.forEach(eventity => {\n                this.setEventity(eventity);\n            });\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);     \n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadEventity = async (id: string) => {\n        let eventity = this.getEventity(id);\n        if (eventity) {\n            this.selectedEventity = eventity;\n            return eventity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                eventity = await agent.Eventities.details(id);\n                this.setEventity(eventity);\n                runInAction(() => {\n                    this.selectedEventity = eventity;\n                })\n                this.setLoadingInitial(false);\n                return eventity;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setEventity = (eventity: Eventity) => {\n        const user = store.userStore.user;\n        if (user) {\n            eventity.isGoing = eventity.attendees!.some(\n                u => u.username === user.username\n            );\n            eventity.isHost = eventity.hostUsername === user.username;\n            eventity.host = eventity.attendees?.find(x => x.username === eventity.hostUsername);\n        }\n        eventity.date = new Date(eventity.date!);\n        this.eventityRegistry.set(eventity.id, eventity);\n    }\n\n    private getEventity = (id: string) => {\n        return this.eventityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createEventity = async (eventity: EventityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Eventities.create(eventity);\n            const newEventity = new Eventity(eventity);\n            newEventity.hostUsername = user!.username;\n            newEventity.attendees = [attendee];\n            this.setEventity(newEventity);\n            runInAction(() => {\n                this.selectedEventity = newEventity;\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    updateEventity = async (eventity: EventityFormValues) => {\n        try {\n            await agent.Eventities.update(eventity);\n            runInAction(() => {\n                if (eventity.id) {\n                    let updatedEventity = {...this.getEventity(eventity.id), ...eventity};\n                    this.eventityRegistry.set(eventity.id, updatedEventity as Eventity);\n                    this.selectedEventity = updatedEventity as Eventity;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    deleteEventity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Eventities.delete(id);\n            runInAction(() => {\n                this.eventityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Eventities.attend(this.selectedEventity!.id);\n            runInAction(() => {\n                if (this.selectedEventity?.isGoing) {\n                    this.selectedEventity.attendees =\n                        this.selectedEventity.attendees?.filter(e => e.username !== user?.username);\n                        this.selectedEventity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedEventity?.attendees?.push(attendee);\n                    this.selectedEventity!.isGoing = true;\n                }\n                this.eventityRegistry.set(this.selectedEventity!.id, this.selectedEventity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    cancelEventityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Eventities.attend(this.selectedEventity!.id);\n            runInAction(() => {\n                this.selectedEventity!.isCancelled = !this.selectedEventity?.isCancelled;\n                this.eventityRegistry.set(this.selectedEventity!.id, this.selectedEventity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    clearSelectedEventity = () => {\n        this.selectedEventity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.eventityRegistry.forEach(eventity => {\n            eventity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserEventity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userEventities: UserEventity[] = [];\n    loadingEventities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = {...this.profile, ...profile as Profile};\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.eventityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following; \n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserEventities = async (username: string, predicate?: string) => {\n        this.loadingEventities = true;\n        try {\n            const eventities =await agent.Profiles.listEventities(username, predicate!);\n            runInAction(() => {\n                this.userEventities = eventities;\n                this.loadingEventities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingEventities = false);\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/eventities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/eventities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image;\n    }\n\n    setDisplayName = (name: string) => {\n        if (this.user) this.user.displayName = name;\n    }\n}","import { createContext, useContext } from \"react\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport EventityStore from \"./eventityStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    eventityStore: EventityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    eventityStore: new EventityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token);\n                } else {\n                    window.localStorage.removeItem('jwt');\n                }\n            }\n        );\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubconnection = (eventityId: string) => {\n        if (store.eventityStore.selectedEventity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?eventityId=' + eventityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n        \n            this.hubConnection.on(\"LoadComments\", (comments: ChatComment[]) => {\n                runInAction(() => \n                {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => \n                {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment)\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.eventityId = store.eventityStore.selectedEventity?.id;\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nconst NavBar = () => {\n    // user, logout are destructured here\n    const {userStore: {user, logout}} = useStore();\n\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}} />\n                    Eventr\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/eventities' name=\"Events\" />\n                <Menu.Item>\n                    <Button as={NavLink} to='/create-event' positive content=\"Create Event\"/>\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>                     \n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n}\n\nexport default observer(NavBar);\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport Calendar from 'react-calendar'\nimport { Header, Menu } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\n\nconst EventityFilters = () => {\n    const {eventityStore: {predicate, setPredicate}} = useStore()\n\n    return (\n        <>\n            <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item \n                    content='All Events' \n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm going\" \n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm hosting\" \n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header />\n            <Calendar\n                onChange={(date: Date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n}\n\nexport default observer(EventityFilters);\n","import { observer } from 'mobx-react-lite'\nimport React, { SyntheticEvent } from 'react'\nimport { Button, Reveal } from 'semantic-ui-react'\nimport { Profile } from '../../app/models/profile'\nimport { useStore } from '../../app/stores/store'\n\ninterface Props {\n    profile: Profile;\n}\n\nconst FollowButton = ({profile}: Props) => {\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    const handleFollow = (e: SyntheticEvent, username: string) => {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n    <Reveal animated='move'>\n        <Reveal.Content visible style={{width: '100%'}}>\n            <Button \n                fluid \n                color='teal' \n                content={profile.following ? 'Following' : 'Not Following'} \n            />\n        </Reveal.Content>\n        <Reveal.Content hidden style={{width: '100%'}}>\n            <Button \n                basic\n                fluid \n                color={profile.following ? 'red' : 'green'} \n                content={profile.following ? 'Unfollow' : 'Follow'}\n                loading={loading}\n                onClick={(e) => handleFollow(e, profile.username)}\n            />\n        </Reveal.Content>\n    </Reveal>\n    )\n}\n\nexport default observer(FollowButton);","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nconst ProfileCard = ({profile}: Props) => {\n\n    const truncate = (str: string | undefined) => {\n        if (str) return str.length > 40 ? str.substring(0, 37) + '...' : str;\n    }\n\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content>\n                <Icon name='user' /> \n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    )\n}\n\nexport default observer(ProfileCard);\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { List, Image, Popup } from 'semantic-ui-react'\nimport { Profile } from '../../../app/models/profile'\nimport ProfileCard from '../../profiles/ProfileCard'\n\ninterface Props {\n    attendees: Profile[];\n}\n\nconst EventityListItemAttendee = ({attendees}: Props) => {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image \n                                size='mini' \n                                circular \n                                src={attendee.image || '/assets/user.png'} \n                                bordered\n                                style={attendee.following ? styles : null}\n                            />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n                \n            ))}\n        </List>\n    )\n}\n\nexport default observer(EventityListItemAttendee);\n","import { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Eventity } from '../../../app/models/eventity';\nimport {format} from 'date-fns';\nimport EventityListItemAttendee from './EventityListItemAttendee';\n\ninterface Props {\n    eventity: Eventity;\n}\n\nexport const EventityListItem = ({eventity} : Props) => {\n    return (\n        <Segment.Group>\n            <Segment>\n                {eventity.isCancelled && \n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBottom: 5}} size='tiny' circular src={eventity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/eventities/${eventity.id}`}>\n                                {eventity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${eventity.hostUsername}`}>{eventity.host?.displayName}</Link></Item.Description>\n                            {eventity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this event\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {eventity.isGoing && !eventity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this event\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(eventity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {eventity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <EventityListItemAttendee attendees={eventity.attendees!} />\n            </Segment>\n            <Segment clearing>\n                <span>{eventity.description}</span>\n                <Button \n                    as={Link}\n                    to={`/eventities/${eventity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n}\n","import { observer } from 'mobx-react-lite';\nimport { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store';\nimport { EventityListItem } from './EventityListItem';\n\nconst EventityList = () => {\n    const {eventityStore} = useStore();\n    const {groupedEventities} = eventityStore;\n\n    return (\n        <>\n            {groupedEventities.map(([group, eventities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    {eventities.map(eventity => (\n                        <EventityListItem key={eventity.id} eventity={eventity} />\n                    ))}\n                </Fragment>\n            ))}\n        </>\n    )\n}\n\nexport default observer(EventityList);","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function EventityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport EventityFilters from './EventityFilters';\nimport EventityList from './EventityList';\nimport EventityListItemPlaceholder from './EventityListItemPlaceholder';\n\nconst EventityDashboard = () => {\n    const {eventityStore} = useStore();\n    const {loadEventities, eventityRegistry, setPagingParams, pagination} = eventityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    const handleGetNext = () => {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadEventities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n      if (eventityRegistry.size <= 1) loadEventities();\n    }, [loadEventities, eventityRegistry]);\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {eventityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <EventityListItemPlaceholder />\n                        <EventityListItemPlaceholder />\n                    </>\n                ) : (\n                        <InfiniteScroll\n                            pageStart={0}\n                            loadMore={handleGetNext}\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                            initialLoad={false}\n                        >\n                            <EventityList />\n                        </InfiniteScroll>\n                )}\n            </Grid.Column>\n            <Grid.Column width=\"6\">\n                <EventityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default observer(EventityDashboard);","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport const MyTextInput = (props: Props) => {\n    const [field, meta] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}\n","import { ErrorMessage, Form, Formik } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Button, Header, Label } from 'semantic-ui-react'\nimport { MyTextInput } from '../../app/common/form/MyTextInput'\nimport { useStore } from '../../app/stores/store'\n\nconst LoginForm = () => {\n    const {userStore} = useStore();\n\n    return (\n        <Formik\n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error =>\n                setErrors({error: 'Invalid email or password'}))}\n        >\n         {({handleSubmit, isSubmitting, errors}) => (\n             <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                 <Header as='h2' content='Login to Eventr' color='teal' textAlign='center' />\n                 <MyTextInput name='email' placeholder='Email' />\n                 <MyTextInput name='password' placeholder='Password' type='password' />\n                 <ErrorMessage \n                    name='error' render={() => \n                    <Label style={{marginBottom: 10}} \n                        basic color='red' content={errors.error} />}\n                 />\n                 <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n             </Form>\n         )}   \n        </Formik>\n    )\n}\n\nexport default observer(LoginForm);\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport const ValidationErrors = ({errors} : Props) => {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>\n                            {err}\n                        </Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}\n","import { ErrorMessage, Form, Formik } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Button, Header } from 'semantic-ui-react'\nimport { MyTextInput } from '../../app/common/form/MyTextInput'\nimport { useStore } from '../../app/stores/store'\nimport * as Yup  from 'yup'\nimport { ValidationErrors } from '../errors/ValidationErrors'\n\nconst RegisterForm = () => {\n    const {userStore} = useStore();\n\n    return (\n        <Formik\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error =>\n                setErrors({error}))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}\n        >\n         {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n             <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                 <Header as='h2' content='Sign up to Eventr' color='teal' textAlign='center' />\n                 <MyTextInput name='displayName' placeholder='Display Name' />\n                 <MyTextInput name='username' placeholder='Username' />\n                 <MyTextInput name='email' placeholder='Email' />\n                 <MyTextInput name='password' placeholder='Password' type='password' />\n                 <ErrorMessage \n                    name='error' render={() => \n                    <ValidationErrors errors={errors.error} />}\n                 />\n                 <Button \n                    disabled={!isValid || !dirty || isSubmitting}\n                    loading={isSubmitting} positive content='Register' type='submit' fluid \n                />\n             </Form>\n         )}   \n        </Formik>\n    )\n}\n\nexport default observer(RegisterForm);\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react'\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nconst HomePage = () => {\n    const {userStore, modalStore} = useStore();\n\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <p>\n                    A DEMO social media website.<br/>\n                    Technologies used: <br/>\n                    (Backend) ASPNET Core 6, C#, SignalR, PostGreSQL, Restful Web API <br/>\n                    (Frontend) ReactJS, Typescript, MobX\n                </p>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\n                    Eventr\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Eventr' />\n                        <Button as={Link} to='/eventities' size='huge' inverted>\n                            Go to events\n                        </Button>\n                    </>\n                    \n                ) : (\n                    <>\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                            Login\n                        </Button>\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                            Register\n                        </Button>\n                    </>    \n                )}\n            </Container>\n        </Segment>\n    )\n}\n\nexport default observer(HomePage);\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport const LoadingComponent = ({inverted = true, content = \"Loading...\"} : Props) => {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}\n","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport const MyTextArea = (props: Props) => {\n    const [field, meta] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}\n","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport const MySelectInput = (props: Props) => {\n    const [field, meta, helpers] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}\n","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n]","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\nexport const MyDateInput = (props: Partial<ReactDatePickerProps>) => {\n    const [field, meta, helpers] = useField(props.name!);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value))  || null }\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}\n","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react'\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react'\nimport { LoadingComponent } from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport {v4 as uuid} from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { MyTextInput } from '../../../app/common/form/MyTextInput';\nimport { MyTextArea } from '../../../app/common/form/MyTextArea';\nimport { MySelectInput } from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport { MyDateInput } from '../../../app/common/form/MyDateInput';\nimport { EventityFormValues } from '../../../app/models/eventity';\n\nconst EventityForm = () => {\n    const history = useHistory();\n    const {eventityStore} = useStore();\n    const {createEventity, updateEventity, \n        loadEventity, loadingInitial} = eventityStore;\n    const {id} = useParams<{id: string}>();\n\n    const [eventity, setEventity] = useState<EventityFormValues>(new EventityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The event title is required'),\n        description: Yup.string().required('The event description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        city: Yup.string().required(),\n        venue: Yup.string().required(),\n    });\n\n    useEffect(() => {\n        if (id) loadEventity(id).then(eventity => setEventity(new EventityFormValues(eventity)));\n    }, [id, loadEventity]);\n\n    const handleFormSubmit = (eventity: EventityFormValues) => {\n        if (!eventity.id) {\n            let newEventity = {\n                ...eventity,\n                id: uuid()\n            };\n            createEventity(newEventity).then(() => history.push(`/eventities/${newEventity.id}`))\n        } else {\n            updateEventity(eventity).then(() => history.push(`/eventities/${eventity.id}`))\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content=\"Loading event...\" />\n\n    return (\n        <Segment clearing>\n            <Header content='Event Details' sub color='teal' />\n            <Formik \n                validationSchema={validationSchema}\n                enableReinitialize \n                initialValues={eventity} \n                onSubmit={values => handleFormSubmit(values)}\n            >\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete=\"off\">\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyTextArea rows={3} placeholder=\"Description\" name=\"description\" />\n                        <MySelectInput options={categoryOptions} placeholder=\"Category\" name=\"category\" />\n                        <MyDateInput \n                            placeholderText=\"Date\" \n                            name=\"date\" \n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder=\"City\" name=\"city\" />\n                        <MyTextInput placeholder=\"Venue\" name=\"venue\" />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting} \n                            floated=\"right\" \n                            position=\"true\" \n                            type=\"submit\" \n                            content=\"Submit\" \n                        />\n                        <Button as={Link} to='/eventities' floated=\"right\" type=\"button\" content=\"Cancel\" />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    )\n}\n\nexport default observer(EventityForm);","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface Props {\n    eventityId: string;\n}\n\nconst EventityDetailedChat = ({eventityId}: Props) => {\n    const {commentStore} = useStore();\n\n    useEffect(() => {\n        if (eventityId) {\n            commentStore.createHubconnection(eventityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, eventityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                    <Formik\n                        onSubmit={(values, {resetForm}) =>\n                            commentStore.addComment(values).then(() => resetForm())}\n                        initialValues={{body: ''}}\n                        validationSchema={Yup.object({\n                            body: Yup.string().required()\n                        })}\n                    >\n                        {({isSubmitting, isValid, handleSubmit}) => (\n                            <Form className='ui form'>\n                                <Field name='body'>\n                                    {(props: FieldProps) => (\n                                        <div style={{position: 'relative'}}>\n                                            <Loader active={isSubmitting} />  \n                                            <textarea\n                                                placeholder='Type comment (ENTER to submit, SHIFT + ENTER for new lines)'\n                                                rows={2}\n                                                {...props.field}\n                                                onKeyPress={e => {\n                                                    if (e.key === 'Enter' && e.shiftKey) {\n                                                        return;\n                                                    }\n                                                    if (e.key === 'Enter' && !e.shiftKey) {\n                                                        e.preventDefault();\n                                                        isValid && handleSubmit();\n                                                    }\n                                                }}\n                                            />      \n                                        </div>\n                                    )}\n                                </Field>\n                            </Form>\n                        )}\n                    </Formik>\n\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n\n                    ))}\n\n                    \n\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n}\n\nexport default observer(EventityDetailedChat);\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Eventity} from \"../../../app/models/eventity\";\nimport {format} from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\n\nconst eventityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst eventityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    eventity: Eventity\n}\n\nconst EventityDetailedHeader = ({eventity}: Props) => {\n    const {eventityStore: {updateAttendance, loading, cancelEventityToggle}} = useStore();\n\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                {eventity.isCancelled && \n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}}\n                        ribbon color='red' content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${eventity.category}.jpg`} fluid style={eventityImageStyle}/>\n                <Segment style={eventityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={eventity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(eventity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${eventity.host?.username}`}>\n                                                        {eventity.host?.displayName}\n                                                        </Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {eventity.isHost ? (\n                    <>\n                        <Button \n                            color={eventity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basic\n                            content={eventity.isCancelled ? 'Re-activate Event' : 'Cancel Event'}\n                            onClick={cancelEventityToggle}\n                            loading={loading}\n                        />\n                        <Button \n                            disabled={eventity.isCancelled}\n                            as={Link} to={`/manage/${eventity.id}`} \n                            color='orange' floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n\n                ) : eventity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\n                    ) : (\n                            <Button \n                                disabled={eventity.isCancelled}\n                                loading={loading} \n                                onClick={updateAttendance} \n                                color='teal'\n                            >\n                                Join Event\n                            </Button>\n                        )\n                }\n            </Segment>\n        </Segment.Group>\n    )\n}\n\nexport default observer(EventityDetailedHeader)","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Eventity} from \"../../../app/models/eventity\";\nimport {format} from 'date-fns';\n\ninterface Props {\n    eventity: Eventity\n}\n\nconst EventityDetailedInfo = ({eventity}: Props) => {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{eventity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n                {format(eventity.date!, 'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{eventity.venue}, {eventity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n}\n\nexport default observer(EventityDetailedInfo);\n","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Eventity } from '../../../app/models/eventity'\n\ninterface Props {\n    eventity: Eventity;\n}\n\nconst EventityDetailedSidebar = ({eventity: {attendees, host}}: Props) => {\n    if (!attendees) return null;\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username &&\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>}\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n}\n\nexport default observer(EventityDetailedSidebar);","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react'\nimport { LoadingComponent } from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport EventityDetailedChat from './EventityDetailedChat';\nimport EventityDetailedHeader from './EventityDetailedHeader';\nimport EventityDetailedInfo from './EventityDetailedInfo';\nimport EventityDetailedSidebar from './EventityDetailedSidebar';\n\nconst EventityDetails = () => {\n    const {eventityStore} = useStore();\n    const {selectedEventity: eventity, loadEventity, loadingInitial, clearSelectedEventity} = eventityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if (id) loadEventity(id);\n        return () => clearSelectedEventity();\n    }, [id, loadEventity, clearSelectedEventity]);\n\n    if (loadingInitial || !eventity) return <LoadingComponent />;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <EventityDetailedHeader eventity={eventity} />\n                <EventityDetailedInfo eventity={eventity} />\n                <EventityDetailedChat eventityId={eventity.id} />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <EventityDetailedSidebar eventity={eventity} />\n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default observer(EventityDetails);\n","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport { ValidationErrors } from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n \n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'eventities/notaguid').catch(err => console.log(err.response));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'eventities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors && \n                <ValidationErrors errors={errors} />\n            }\n        </>\n    )\n}\n\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\n\nexport const NotFound = () => {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Not found here!\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/eventities'>\n                    Return to events\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nconst ServerError = () => {\n    const {commonStore} = useStore();\n\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n}\n\nexport default observer(ServerError);\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nconst ModalContainer = () => {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nexport default observer(ModalContainer);\n","import { Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport { MyTextInput } from '../../app/common/form/MyTextInput';\nimport { MyTextArea } from '../../app/common/form/MyTextArea';\nimport { Button } from 'semantic-ui-react';\n\ninterface Props {\n    setEditMode: (editMode: boolean) => void;\n}\n\nconst ProfileEditForm = ({setEditMode}: Props) => {\n    const {profileStore: {profile, updateProfile}} = useStore();\n\n    return (\n        <Formik\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\n            onSubmit={values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false);\n                })\n            }}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required()\n            })}\n        >\n           {({isSubmitting, isValid, dirty}) => (\n               <Form className='ui form'>\n                   <MyTextInput name='displayName' placeholder='Display Name' />\n                   <MyTextArea rows={3} name='bio' placeholder='Bio' />\n                   <Button\n                        positive\n                        type='submit'\n                        loading={isSubmitting}\n                        content='Update Profile'\n                        floated='right'\n                        disabled={!isValid || !dirty}\n                   />\n               </Form>\n           )} \n        </Formik>\n    )\n}\n\nexport default observer(ProfileEditForm);\n","import { observer } from 'mobx-react-lite'\nimport React, { useState } from 'react'\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileEditForm from './ProfileEditForm';\n\nconst ProfileAbout = () => {\n    const {profileStore} = useStore();\n    const {isCurrentUser, profile} = profileStore;\n    const [editMode, setEditMode] = useState(false);\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button \n                            floated='right'\n                            basic\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {editMode \n                    ? <ProfileEditForm setEditMode={setEditMode} />\n                    : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n}\n\nexport default observer(ProfileAbout);\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite'\nimport React, { SyntheticEvent, useEffect } from 'react'\nimport { Link } from 'react-router-dom';\nimport { Card, Grid, Header, Tab, TabProps, Image } from 'semantic-ui-react';\nimport { UserEventity } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\nconst panes = [\n    { menuItem: 'Future Events', pane: { key: 'future' }},\n    { menuItem: 'Past Events', pane: { key: 'past' }},\n    { menuItem: 'Hosting', pane: { key: 'hosting' }},\n]\n\nconst ProfileEventities = () => {\n    const {profileStore} = useStore();\n    const {\n        loadUserEventities,\n        profile,\n        loadingEventities,\n        userEventities\n    } = profileStore;\n\n    useEffect(() => {\n        loadUserEventities(profile!.username);\n    }, [loadUserEventities, profile]);\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserEventities(profile!.username, panes[data.activeIndex as number].pane.key);\n    }\n\n    return (\n        <Tab.Pane loading={loadingEventities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Eventities'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{secondary: true, pointing: true}}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userEventities.map((eventity: UserEventity) => (\n                            <Card\n                                as={Link}\n                                to={`/eventities/${eventity.id}`}\n                                key={eventity.id}\n                            >\n                                <Image\n                                    src={`/assets/categoryImages/${eventity.category}.jpg`}\n                                    style={{minHeight: 100, objectFit: 'cover'}}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{eventity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(eventity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(eventity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n}\n\nexport default observer(ProfileEventities);\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nconst ProfileFollowings = () => {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header \n                        floated='left' \n                        icon='user' \n                        content={activeTab === 3 \n                            ? `People following ${profile?.displayName}` \n                            : `People ${profile?.displayName} is following`} \n                    />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n}\n\nexport default observer(ProfileFollowings);\n","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport const PhotoWidgetDropzone = ({setFiles}: Props) => {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport const PhotoWidgetCropper = ({imagePreview, setCropper}: Props) => {\n    return (\n        <Cropper \n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Button, Grid, Header } from 'semantic-ui-react'\nimport { PhotoWidgetDropzone } from './PhotoWidgetDropzone'\nimport { Cropper } from 'react-cropper';\nimport { PhotoWidgetCropper } from './PhotoWidgetCropper';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport const PhotoUploadWidget = ({loading, uploadPhoto}: Props) => {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    const onCrop = () => {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\n        }\n    }, [files]);\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo'/>\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize Photo'/>\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload'/>\n                {files && files.length > 0 && \n                    <>\n                        <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\n                        <Button.Group widths={2}>\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                        </Button.Group>\n                    </>\n                }\n                \n            </Grid.Column>\n        </Grid>\n    )\n}\n","import { observer } from 'mobx-react-lite'\nimport React, { SyntheticEvent, useState } from 'react'\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport { PhotoUploadWidget } from '../../app/common/imageUpload/PhotoUploadWidget';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nconst ProfilePhotos = ({profile}: Props) => {\n    const {profileStore: {isCurrentUser, uploadPhoto, \n        uploading, loading, setMainPhoto, deletePhoto}} = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n    const handlePhotoUpload = (file: Blob) => {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    const handleSetMainPhoto = (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) => {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    const handleDeletePhoto = (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) => {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' basic \n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'} \n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) : (\n                        <Card.Group itemsPerRow={5}>\n                            {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url} />\n                                    {isCurrentUser && (\n                                        <Button.Group fluid widths={2}>\n                                            <Button \n                                                basic\n                                                color='green'\n                                                content='Main'\n                                                name={'main' + photo.id}\n                                                disabled={photo.isMain}\n                                                loading={target === 'main' + photo.id && loading}\n                                                onClick={e => handleSetMainPhoto(photo, e)}\n                                            />\n                                            <Button \n                                                basic\n                                                color='red'\n                                                icon='trash'\n                                                loading={target === photo.id && loading}\n                                                onClick={e => handleDeletePhoto(photo, e)}\n                                                disabled={photo.isMain}\n                                                name={photo.id}\n                                            />\n                                        </Button.Group>\n                                    )}\n                                </Card>\n                            ))}\n                        </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n}\n\nexport default observer(ProfilePhotos);\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Tab } from 'semantic-ui-react'\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileEventities from './ProfileEventities';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface Props {\n    profile: Profile;\n}\n\nconst ProfileContent = ({profile}: Props) => {\n    const {profileStore} = useStore();\n\n    const panes = [\n        {menuItem: 'About', render: () => <ProfileAbout />},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\n        {menuItem: 'Events', render: () => <ProfileEventities />},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\n    ];\n\n    return (\n        <Tab \n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n}\n\nexport default observer(ProfileContent);\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nconst ProfileHeader = ({profile}: Props) => {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n}\n\nexport default observer(ProfileHeader);","import { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Grid } from 'semantic-ui-react'\nimport { LoadingComponent } from '../../app/layout/LoadingComponent'\nimport { useStore } from '../../app/stores/store'\nimport ProfileContent from './ProfileContent'\nimport ProfileHeader from './ProfileHeader'\n\nconst ProfilePage = () => {\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab]);\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>\n                }\n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default observer(ProfilePage);\n","import React from 'react'\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router-dom'\nimport { useStore } from '../stores/store';\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport const PrivateRoute = ({component: Component, ...rest}: Props) => {\n    const {userStore: {isLoggedIn}} = useStore();\n\n    return (\n        <Route \n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}\n","import { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport { observer } from 'mobx-react-lite';\nimport EventityDashboard from '../../features/eventities/dashboard/EventityDashboard';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport EventityForm from '../../features/eventities/form/EventityForm';\nimport EventityDetails from '../../features/eventities/details/EventityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport { NotFound } from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport { LoadingComponent } from './LoadingComponent';\nimport { useEffect } from 'react';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport { PrivateRoute } from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore]);\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{marginTop: '7em'}}>\n              <Switch>\n                <PrivateRoute exact path='/eventities' component={EventityDashboard} />\n                <PrivateRoute path='/eventities/:id' component={EventityDetails} />\n                <PrivateRoute key={location.key} path={['/create-event', '/manage/:id']} component={EventityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from 'react'\nimport { useLocation } from 'react-router-dom';\n\nexport const ScrollToTop = () => {\n    const {pathname} = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname])\n\n    return null;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport { ScrollToTop } from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}